Utilizando o metodo da Mediana foi o melhor caso em todas as situações, enquanto o metodo Aleatorio foi o pior em todas as situações.
O metodo de pegar a mediana do array como pivo é uma boa escolha por sempre conseguir pegar um valor que não é o maior e nem o menor.

O quicksort aleatorio sempre vai pegar um numero aleatorio para ser o pivo
O quicksort First vai pegar sempre o primeiro elemento do array para ser o pivo
O quicksort Last vai pegar sempre o ultimo elemento do array para ser o pivo
O quicksort MedianOfThree vai fazer o calculo da mediana entre o primeiro, o ultimo e o elemento do meio do array para pegar o pivo

private void quicksortFirstPivot(int esq, int dir) {
        int i = esq, j = dir;
        int pivo = array[0];
        while (i <= j) {
            while (array[i] < pivo) i++;
            while (array[j] > pivo) j--;
            if (i <= j) {
                swap(i, j);
                i++;
                j--;
            }
        }
        if (esq < j)  quicksort(esq, j);
        if (i < dir)  quicksort(i, dir);
    }
    private void quicksortLastPivot(int esq, int dir) {
        int i = esq, j = dir;
        int pivo = array[n-1];
        while (i <= j) {
            while (array[i] < pivo) i++;
            while (array[j] > pivo) j--;
            if (i <= j) {
                swap(i, j);
                i++;
                j--;
            }
        }
        if (esq < j)  quicksort(esq, j);
        if (i < dir)  quicksort(i, dir);
    }
    private void quicksortRandomPivot(int esq, int dir) {
        int i = esq, j = dir;
        Random rand = new Random();
        int pivo = array[Math.abs(rand.nextInt()) % n];
        while (i <= j) {
            while (array[i] < pivo) i++;
            while (array[j] > pivo) j--;
            if (i <= j) {
                swap(i, j);
                i++;
                j--;
            }
        }
        if (esq < j)  quicksort(esq, j);
        if (i < dir)  quicksort(i, dir);
    }
    private void quicksortMedianOfThree(int esq, int dir) {
        int i = esq, j = dir;
        int meio = (dir+esq)/2;
        if(esq < meio){
            swap(esq, meio);
        }
        if(esq < dir){
            swap(esq, dir);
        }
        if(meio < dir){
            swap(meio, dir);
        }
        int pivo = array[meio];
        while (i <= j) {
            while (array[i] < pivo) i++;
            while (array[j] > pivo) j--;
            if (i <= j) {
                swap(i, j);
                i++;
                j--;
            }
        }
        if (esq < j)  quicksort(esq, j);
        if (i < dir)  quicksort(i, dir);
    }
    